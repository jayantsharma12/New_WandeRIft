import { type NextRequest, NextResponse } from "next/server"
import { GoogleGenerativeAI } from "@google/generative-ai"

// Initialize Google Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY || "")

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { destination, days, budget, interests, travelers } = body

    if (!destination || !days || !budget) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 })
    }

    // Create the prompt for educational travel planning
    const prompt = `Create a detailed ${days}-day educational travel itinerary for ${destination} with a ${budget} budget for ${travelers || 1} travelers.

Focus on educational and cultural experiences. The travelers are interested in: ${interests.join(", ")}.

Please provide:
1. Day-wise detailed itinerary with specific timings
2. Educational activities, museums, historical sites, cultural experiences
3. Learning objectives for each day
4. Estimated costs in Indian Rupees (â‚¹) for each activity
5. Local cultural insights and educational tips
6. Recommended educational resources or books about the destination

Format the response as a structured JSON with the following format:
{
  "itinerary": [
    {
      "day": 1,
      "theme": "Day theme/focus",
      "activities": [
        {
          "time": "10:00 AM",
          "activity": "Activity description",
          "educational_value": "What will be learned",
          "cost": 500,
          "duration": "2 hours"
        }
      ]
    }
  ],
  "total_estimated_cost": 15000,
  "educational_highlights": ["Key learning points"],
  "cultural_insights": ["Important cultural information"],
  "recommended_reading": ["Book/resource suggestions"]
}

Make it educational, engaging, and suitable for curious learners and students.`

    // Call Google Gemini API
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })
    const result = await model.generateContent(prompt)
    const response = await result.response
    const text = response.text()

    // Try to parse JSON response, fallback to text if parsing fails
    let parsedResponse
    try {
      parsedResponse = JSON.parse(text)
    } catch (parseError) {
      // If JSON parsing fails, create a structured response from the text
      parsedResponse = {
        itinerary: [
          {
            day: 1,
            theme: "AI Generated Itinerary",
            activities: [
              {
                time: "Full Day",
                activity: text,
                educational_value: "Comprehensive learning experience",
                cost: 0,
                duration: "Full day",
              },
            ],
          },
        ],
        total_estimated_cost: 0,
        educational_highlights: ["AI-powered educational planning"],
        cultural_insights: ["Generated by Google Gemini AI"],
        recommended_reading: ["Local guidebooks and cultural resources"],
      }
    }

    return NextResponse.json({
      success: true,
      data: parsedResponse,
      destination,
      days,
      budget,
      interests,
      travelers,
    })
  } catch (error) {
    console.error("Error generating itinerary:", error)
    return NextResponse.json(
      {
        error: "Failed to generate itinerary. Please try again.",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
